Timer unit: 1e-07 s

Total time: 0.398213 s
File: <ipython-input-149-fda2805d9698>
Function: metropolis_hastings at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def metropolis_hastings(self, X, y, semilla):
     5                                                   '''
     6                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
     7                                                   '''
     8                                           
     9                                                   # asegura replicabilidad
    10         1         88.0     88.0      0.0          np.random.seed(semilla)
    11                                           
    12                                                   # obtiene distribucion a priori y candidatos
    13         1       6802.0   6802.0      0.2          distribucion_priori = self.get_priori()
    14         1      37898.0  37898.0      1.0          W_candidatos = self.get_metropolis_hastings_candidatos()
    15         1        327.0    327.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    16                                           
    17                                                   # contador de candidatos aceptados
    18         1          8.0      8.0      0.0          aceptados = 0
    19                                                   
    20         1       5191.0   5191.0      0.1          log_ver_actual = self._log_verosimilitud(self.traza[0], X, y)
    21      1001      11384.0     11.4      0.3          for i, w_candidato in enumerate(W_candidatos):
    22                                           
    23                                                       # localiza distribucion candidatos en w_actual
    24      1000      10824.0     10.8      0.3              w_actual = self.traza[i]
    25      1000      34654.0     34.7      0.9              w_candidato += w_actual
    26                                           
    27                                                       # calcula prior
    28      1000     357354.0    357.4      9.0              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    29      1000     296920.0    296.9      7.5                  distribucion_priori.logpdf(w_actual)
    30                                           
    31                                                       # calcula verosimilitud
    32      1000    3129060.0   3129.1     78.6              log_ver_candidato = self._log_verosimilitud(w_candidato, X, y)
    33      1000       9402.0      9.4      0.2              delta_verosimilitud = log_ver_candidato - \
    34      1000       9810.0      9.8      0.2                  log_ver_actual
    35                                           
    36                                                       # probabilidad de aceptacion
    37      1000      17209.0     17.2      0.4              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    38                                           
    39      1000      15652.0     15.7      0.4              if U_aceptacion[i] < p_aceptacion:
    40                                           
    41                                                           # actualiza valor actual y contador de aceptados
    42       610       6793.0     11.1      0.2                  w_actual = w_candidato
    43       610       4291.0      7.0      0.1                  log_ver_actual = log_ver_candidato
    44       610       4876.0      8.0      0.1                  aceptados += 1
    45                                           
    46      1000      23568.0     23.6      0.6              self.traza[i+1] = w_actual
    47                                           
    48                                                   # almacena la proporcion de candidatos aceptados
    49         1         17.0     17.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras