Timer unit: 1e-07 s

Total time: 0.79231 s
File: <ipython-input-144-094592e43570>
Function: metropolis_hastings at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               def metropolis_hastings(self, X, y, semilla):
    46                                                   '''
    47                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
    48                                                   '''
    49                                           
    50                                                   # asegura replicabilidad
    51         1        155.0    155.0      0.0          np.random.seed(semilla)
    52                                           
    53                                                   # obtiene distribucion a priori y candidatos
    54         1      18345.0  18345.0      0.2          distribucion_priori = self.get_priori()
    55         1      45115.0  45115.0      0.6          W_candidatos = self.get_metropolis_hastings_candidatos()
    56         1        401.0    401.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    57                                           
    58                                                   # contador de candidatos aceptados
    59         1          9.0      9.0      0.0          aceptados = 0
    60                                           
    61      1001      13441.0     13.4      0.2          for i, w_candidato in enumerate(W_candidatos):
    62                                           
    63                                                       # localiza distribucion candidatos en w_actual
    64      1000      12541.0     12.5      0.2              w_actual = self.traza[i]
    65      1000      39901.0     39.9      0.5              w_candidato += w_actual
    66                                           
    67                                                       # calcula prior
    68      1000     412455.0    412.5      5.2              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    69      1000     343979.0    344.0      4.3                  distribucion_priori.logpdf(w_actual)
    70                                           
    71                                                       # calcula verosimilitud
    72      1000    3489635.0   3489.6     44.0              delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - \
    73      1000    3463517.0   3463.5     43.7                  self._log_verosimilitud(w_actual, X, y)
    74                                           
    75                                                       # probabilidad de aceptacion
    76      1000      24065.0     24.1      0.3              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    77                                           
    78      1000      18867.0     18.9      0.2              if U_aceptacion[i] < p_aceptacion:
    79                                           
    80                                                           # actualiza valor actual y contador de aceptados
    81       610       6392.0     10.5      0.1                  w_actual = w_candidato
    82       610       6112.0     10.0      0.1                  aceptados += 1
    83                                           
    84      1000      28148.0     28.1      0.4              self.traza[i+1] = w_actual
    85                                           
    86                                                   # almacena la proporcion de candidatos aceptados
    87         1         20.0     20.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras